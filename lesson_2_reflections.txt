
$ What happens when you initialize a repository? Why do you need to do it?

* Git will create the ".git" directory under my working directory

* Here we are in the "master" branch.

* If there are files in the working directory they will NOT be tracked by 
default. 
*******************************************************************************

$ How is the staging area different from the working directory and the repository?

* The staging area is the intermediate area between the working directory and the 
  repository.
  
* File on the staging area are not committed yet.



$ What value do you think it offers?

* Files in the working directory could be added in "groups" to the staging 
  area for subsequent commits.

* Files could be added or removed from the staging area before commits.
*******************************************************************************

$ How can you use the staging area to make sure you have one commit per logical
 change?

* Well, Adding files to staging area using "git add" command.
* Then check of the status using "git status" to see the tracked files and 
  untracked files and check if all logical-related files are added on the staging
  then commit.
*******************************************************************************

$ What are some situations when branches would be helpful in keeping your 
  history organized? How would branches help?

*Situations like 
	-When you try to add new feature;
	-different team members as working on the same files
	-when you experiment some behaviour of the program.

* branches	help by making a new log for changing file(s) and keeping the 
  original version intact. Then after the new work is done ,hopefully 
  successful, we can merge it to the original work 
  
*******************************************************************************
 
$ How do the diagrams help you visualize the branch structure?

* A diagram can help by showing the main branch (master) and at which points 
  there are side branches out of it
  
* Also it shows if a branch is out from another branch ... etc.

* This visual tree is better than textual one where its hard to infer the 
  structure of the branches
  
*******************************************************************************

$ What is the result of merging two branches together? Why do we represent it in 
the diagram the way we do?

* The result of merging is the combination of all commits done on both branches
  sorted by the their time-stamp.
  
* We can delete the branch that we merged from safely after that.

********************************************************************************

$ What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges 
  manually?
  
* pros of automatic merging is that it saves time to do it manually.

* cons are there are some situations that Git can't decide what to do and a 
  conflict happen. This need some human decision of what could be merged, which 
  can lead to some errors or bugs.
  