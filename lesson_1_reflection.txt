How did viewing a diff between two versions of a file help you see the bug that
was introduced?

   I couldn't get the bug from first nor even forth scan.
   I kept scanning until I accidentally found it "spacr" 
   I think even with this FC tool i was hard to get the bug.
   If it is visual comparison it , will be better than this textual comparison.
   24/02/2015
   
   
   
*************************************************************************************   
   
   
   

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Sometimes a programmer need to review his old history of some certain code
files to check his progress. Or even he wants to revert back to his original 
code version for many reasons.
	
*************************************************************************************


What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Committing Automatically 
		pros:
			you won't lose any part of your code for any reason 
			you are not worry about committing
		
		cons:
			may illogical versions are committed 
			sometimes you will find version having syntax errors 
			diff will be very hard 
			each commit will not have a meaningful message representing it.
			
	Manually Committing
		pros:
			you control when to commit 
			adding a meaningful message with each commit
			no unneeded versions
			mostly no syntax errors
		
		cons:
			you are worry when to commit
			you might lose part of code if you forget to commit.
		
*************************************************************************************

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    I think this is because of the purpose each system is designed for.
	Google Docs is designed for one document per time and all docs are irrelevant
	But Git is designed for code files which are in most cases related to each other 
	
	so committing a snapshot of all files in one version will help to trace the 
	program progress.
	
	
	
	
	
*************************************************************************************	
	
How can you use the commands git log and git diff to view the history of files?

    git log : display all commit history of the directory
			-- stat gives you more (colourful) statistics about each commit
				like # of insertions and # of deletions 
	usage : 
		$ git log 
		$ git log --stat
			
	
	git diff : display the difference between two commits
	usage : 
		$ git diff e6b88eb7c0419e619565ef74db962130c951a4e1 254f2f45dda4ed35f447e73a98a5c22878f8f5d0
	or you can write the first 4 characters of the id 
		$ git diff e6b88 254f
		
		
		
*************************************************************************************		

How might using version control make you more confident to make changes that
could break something?

    Yes now as long as I used to commit in every logical change , then if something unusual happened 
	I can revert back to older versions of my code and "diff" to see where is the bug.
	
	This is a great feature that, as I think, almost all professional programmers need.
	Also this could be helpful in Teams where many programmers work together on the same project.
	
	
	
	
*************************************************************************************

Now that you have your workspace set up, what do you want to try using Git for?

    I want to use it for my code version control
